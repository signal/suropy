#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ServiceStatus:
  DEAD = 0
  STARTING = 1
  ALIVE = 2
  STOPPING = 3
  STOPPED = 4
  WARNING = 5

  _VALUES_TO_NAMES = {
    0: "DEAD",
    1: "STARTING",
    2: "ALIVE",
    3: "STOPPING",
    4: "STOPPED",
    5: "WARNING",
  }

  _NAMES_TO_VALUES = {
    "DEAD": 0,
    "STARTING": 1,
    "ALIVE": 2,
    "STOPPING": 3,
    "STOPPED": 4,
    "WARNING": 5,
  }

class ResultCode:
  OK = 0
  STOPPED = 1
  CRC_CORRUPTED = 2
  QUEUE_FULL = 3
  OTHER_ERROR = 4

  _VALUES_TO_NAMES = {
    0: "OK",
    1: "STOPPED",
    2: "CRC_CORRUPTED",
    3: "QUEUE_FULL",
    4: "OTHER_ERROR",
  }

  _NAMES_TO_VALUES = {
    "OK": 0,
    "STOPPED": 1,
    "CRC_CORRUPTED": 2,
    "QUEUE_FULL": 3,
    "OTHER_ERROR": 4,
  }


class Result:
  """
  Attributes:
   - resultCode
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'resultCode', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, resultCode=None, message=None,):
    self.resultCode = resultCode
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.resultCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Result')
    if self.resultCode is not None:
      oprot.writeFieldBegin('resultCode', TType.I32, 1)
      oprot.writeI32(self.resultCode)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.resultCode)
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TMessageSet:
  """
  Attributes:
   - app
   - numMessages
   - compression
   - crc
   - messages
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'app', None, None, ), # 1
    (2, TType.I32, 'numMessages', None, None, ), # 2
    (3, TType.BYTE, 'compression', None, None, ), # 3
    (4, TType.I64, 'crc', None, None, ), # 4
    (5, TType.STRING, 'messages', None, None, ), # 5
  )

  def __init__(self, app=None, numMessages=None, compression=None, crc=None, messages=None,):
    self.app = app
    self.numMessages = numMessages
    self.compression = compression
    self.crc = crc
    self.messages = messages

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.app = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.numMessages = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.compression = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.crc = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.messages = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TMessageSet')
    if self.app is not None:
      oprot.writeFieldBegin('app', TType.STRING, 1)
      oprot.writeString(self.app)
      oprot.writeFieldEnd()
    if self.numMessages is not None:
      oprot.writeFieldBegin('numMessages', TType.I32, 2)
      oprot.writeI32(self.numMessages)
      oprot.writeFieldEnd()
    if self.compression is not None:
      oprot.writeFieldBegin('compression', TType.BYTE, 3)
      oprot.writeByte(self.compression)
      oprot.writeFieldEnd()
    if self.crc is not None:
      oprot.writeFieldBegin('crc', TType.I64, 4)
      oprot.writeI64(self.crc)
      oprot.writeFieldEnd()
    if self.messages is not None:
      oprot.writeFieldBegin('messages', TType.STRING, 5)
      oprot.writeString(self.messages)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.app)
    value = (value * 31) ^ hash(self.numMessages)
    value = (value * 31) ^ hash(self.compression)
    value = (value * 31) ^ hash(self.crc)
    value = (value * 31) ^ hash(self.messages)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
